---
/* We don't need any server-side fetching here, so the frontmatter can be left empty */
---

<main id="card-container">
  <p>Loading cards...</p> <!-- Placeholder message while the data is being fetched -->
</main>

<script>
  async function fetchNotionData() {
    const notionApiUrl = '/.netlify/functions/fetch-notion';

    try {
      const response = await fetch(notionApiUrl);
      const contentType = response.headers.get('content-type');
      if (contentType && contentType.includes('text/html')) {
        console.error('Received HTML response instead of JSON');
        throw new Error('Server returned an HTML response instead of JSON');
      }

      const localNotionData = await response.json();
      const localCards = localNotionData.results; // Array of objects

      // Populate the card container with the fetched data
      const cardContainer = document.getElementById('card-container');
      // @ts-ignore
      cardContainer.innerHTML = ''; // Clear the loading message

      localCards.forEach((card: any) => {
        const article = document.createElement('article');
        article.classList.add('card');

        article.innerHTML = `
          <div class="img__container">
            <img src="/images/notion-post-image.webp" class="card__image" />
          </div>
          <h2 class="card__heading">${card.properties.Title.rich_text[0]?.plain_text}</h2>
          <div class="card__content">
            <p class="card__description">${card.properties.Description.rich_text[0]?.plain_text}</p>
          </div>
          <a href="#">
            <div class="card__btn">READ POST</div>
          </a>
        `;
      // @ts-ignore
        cardContainer.appendChild(article);
      });
    } catch (error: any) {
      console.error('Error fetching data:', error.message);
      const cardContainer = document.getElementById('card-container');
      // @ts-ignore
      cardContainer.innerHTML = '<p>Failed to load cards. Please try again later.</p>';
    }
  }

  fetchNotionData();
</script>

<style is:global>
  .card {
    height: 400px;
    flex: 0 1 400px;
    height: 480px;
    box-shadow: var(--shadow-5);
    padding: var(--size-fluid-2);
    border-radius: var(--radius-4);
    background-color: var(--violet-0);
    overflow: hidden; /* Hide any overflowing content */
    text-overflow: ellipsis;
  }

  article .img__container {
    height: 40%;
    display: flex;
    justify-content: center;
    content: ;
  }

  .img__container img {

    width: 100%;
    height: 100%;
    object-fit: cover; /* Makes the image cover the container while keeping its aspect ratio */
    border-radius: 8px 8px 0px 0px;
  }

  .card__heading {
    height: 10%;
    font-size: larger;
    font-weight: 500;
    min-width: 100%;
    margin-bottom: 8px;
  }

  .card__content {
    height: 30%;
    overflow: hidden;
  }


  .card__description {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 3; /* Show up to 3 lines of text */
    overflow: hidden; /* Hide the overflowing text */
    text-overflow: ellipsis; /* Show ellipsis for overflowing text */
    font-size: 16px;
    color: #333;
    line-height: 1.5;
  }


  #card-container {
    display: flex;
    align-items: start;
    flex-wrap: wrap;
    justify-content: center;
    gap: var(--size-fluid-4);
    margin: var(--size-fluid-4);
    max-width: 1200px;
  }

  .card__btn {
    background-color: blueviolet !important;
    color: white;
    padding: 8px;
    border-radius: 8px;
    margin-top: 20px;
    box-shadow: var(--shadow-4);
    transition: all 250ms var(--ease-squish-3);
  }

  .card__btn:is(:hover, :focus) {
      text-decoration: none;
      box-shadow: none;
      transform: scale(.9);
  }
</style>
